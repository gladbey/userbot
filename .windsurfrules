# YazÄ±lÄ±m Projesi Kurallar DosyasÄ± (Rules)

## 1. Kod YapÄ±sÄ± ve Mimarisi
- **KatmanlÄ± mimari** kullan (MVC, MVVM vb.).
- TÃ¼m kod **modÃ¼ler halinde** olmalÄ±, her dosya belirli bir iÅŸleve sahip olmalÄ±.
- Yeni bir Ã¶zellik eklenirken var olan kod bozulmamalÄ±. Eski fonksiyonlarla uyumlu olmasÄ±na dikkat et.
- **Tek sorumluluk ilkesi**: Her sÄ±nÄ±f veya fonksiyon tek bir iÅŸlemi yerine getirmeli.

## 2. Kod StandartlarÄ±
- **Kod okunabilir olmalÄ±**, yorum satÄ±rlarÄ± kullan.
- **DeÄŸiÅŸken ve fonksiyon isimleri** anlamlÄ± olmalÄ±.
- **Kod tekrarÄ±nÄ± Ã¶nle** (DRY - Don't Repeat Yourself prensibi).
- **Kod formatlama kurallarÄ±na** uy (Python: PEP8, JavaScript: ESLint, Prettier kullan).
- **Kritik kod bloklarÄ±nÄ± test etmeden commit yapma**.

## 3. SÃ¼rÃ¼m KontrolÃ¼ (Git KurallarÄ±)
- **Her Ã¶zellik iÃ§in ayrÄ± bir branch aÃ§** ve test etmeden ana dala (main) merge yapma.
- **Commit mesajlarÄ± aÃ§Ä±k ve anlaÅŸÄ±lÄ±r olmalÄ±** ("Bug fix yapÄ±ldÄ±" yerine "Login sayfasÄ±nda token hatasÄ± giderildi" gibi).
- **PR (Pull Request) aÃ§madan merge yapma**, en az bir kod incelemesi al.

## 4. Test ve Hata YÃ¶netimi
- Her yeni Ã¶zellik eklenmeden Ã¶nce **test senaryolarÄ± oluÅŸtur**.
- Otomatik testler (Ã¶rn: Jest, PyTest) kullan.
- Kodda try-catch bloklarÄ± kullan, hata mesajlarÄ±nÄ± logla.
- **Hata ayÄ±klama iÃ§in merkezi bir log sistemi kullan** (Sentry, LogRocket vb.).

## 5. DokÃ¼mantasyon ve Ä°letiÅŸim
- **Kod iÃ§i yorumlar ekle** ("Bu fonksiyon ÅŸu iÅŸlemi yapar" gibi).
- Proje iÃ§in README dosyasÄ± hazÄ±rla ve gÃ¼ncel tut.
- API endpointleri iÃ§in Swagger/OpenAPI gibi dokÃ¼mantasyon kullan.
- TakÄ±m Ã§alÄ±ÅŸmalarÄ±nda **iletiÅŸim kanalÄ± belirle** (Slack, Discord, Trello vb.).

## 6. Performans ve GÃ¼venlik
- **Gereksiz veritabanÄ± sorgularÄ±nÄ± Ã¶nle**, cache mekanizmalarÄ± kullan (Redis, Memcached).
- **Veri giriÅŸlerini sanitize et** (SQL Injection, XSS gibi aÃ§Ä±klara dikkat et).
- KullanÄ±cÄ± yetkilendirme ve kimlik doÄŸrulama sistemlerini dÃ¼zgÃ¼n uygula (OAuth, JWT vb.).

## 7. Yedekleme ve Acil Durum PlanÄ±
- **VeritabanÄ±nÄ± ve kritik dosyalarÄ± belirli aralÄ±kla yedekle**.
- Sunucu Ã§Ã¶kmesi veya veri kaybÄ± gibi durumlara karÅŸÄ± **acil durum planÄ± hazÄ±rla**.
- **Kod deÄŸiÅŸikliklerini rollback edebilmek iÃ§in versiyonlama sistemi kullan**.

---
Bu kurallara uyarsan proje zamanla bÃ¼yÃ¼dÃ¼kÃ§e kod kalitesini ve stabilitesini koruyabilirsin. Herhangi bir Ã¶zelliÄŸi eklememizi istersen sÃ¶yle! ğŸš€

